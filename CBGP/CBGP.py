# ===================================================================
# @(#)CBGP.py
#
# @author Sebastien Tandel (standel@info.ucl.ac.be)
# @date 29/09/2004
# Modified by Bastien Claeys & Thomas Marissal
# @lastdate 30/05/2018
# ===================================================================
from __future__ import print_function
import os, select, Queue, thread, threading, sys, posix, time;

class CBGP_reader(threading.Thread):
  rHandle = None
  qOutput = None
  def __init__(self, rHandle, qOutput):
    threading.Thread.__init__(self)
    self.rHandle = rHandle
    self.qOutput = qOutput

  def run(self):
    whileTrue = True
    while whileTrue:
      r, w, e = select.select([self.rHandle.fileno()], [], [])
      sNewLines = self.rHandle.readline()
      whileTrue = self.read_condition_stop(sNewLines)
      while (whileTrue and sNewLines):
        self.qOutput.put(sNewLines)
        sNewLines = self.rHandle.readline()
        whileTrue = self.read_condition_stop(sNewLines)

  def read_condition_stop(self, sLine):
    if (sLine.find("stop-CBGP_reader") >= 0):
      return False
    else:
      return True

class CBGP:
  wHandle = None
  rHandle = None
  qOutput = None
  ReadingThread = None
  def __init__(self, cbgp):
    #cbgp = cbgp + ' 2>/dev/null'
    self.wHandle, self.rHandle = os.popen2(cbgp)
    self.qOutput = Queue.Queue(0)
    self.ReadingThread = CBGP_reader(self.rHandle, self.qOutput)
    self.ReadingThread.start()

  def send(self, sMessage):
    if (self.wHandle != None):
      posix.write(self.wHandle.fileno(), sMessage)
      self.wHandle.flush()

  def expect(self):
    if (self.qOutput != None):
      stringRet = self.qOutput.get()
      return stringRet
    else:
      return None

  def finalize(self):

    self.send('print "stop-CBGP_reader\\n"\n')
    self.ReadingThread.join()
    self.rHandle.close()
    self.wHandle.close()


# Runs the C-BGP commands contained in the file "commands_cbgp" generated by "generate_cbgp_commands.py"
def run_cbgp(path):
  cBGP = CBGP("/usr/local/bin/cbgp")
  srcfile = open(path+"/cbgp_intermediate/commands_cbgp","r")
  dstfile = open(path+"/cbgp_intermediate/output_cbgp", "w")
  cBGP.send('set autoflush on\n')  
  for line in srcfile:
    cBGP.send(line)
  cBGP.send('print "done\\n"\n')
  
  sRet = cBGP.expect()

  while (sRet != None and sRet.find("done") < 0): 
    dstfile.write(sRet.rstrip('\n')+"\n")
    sRet = cBGP.expect()

  cBGP.finalize()
  
if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Not enough arguments (1 required)")
        print("./CBGP.py <PATH>")    
        print("\t<PATH> : name of the folder containing the topology")
        exit()
    path = sys.argv[1]
    print("... running C-BGP : ",end='')
    run_cbgp(path)
    print(" done")  
